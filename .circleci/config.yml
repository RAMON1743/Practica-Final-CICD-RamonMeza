version: 2.1

jobs:
  build-and-test:
    docker:
      - image: cimg/python:3.9  # Imagen oficial de Python
      - image: redis:alpine    # Servicio de Redis
        name: redis-final       # Nombre del contenedor de Redis

    steps:
      # Clonación del código desde GitHub
      - checkout

      # Configuración de Docker remoto (sin especificar versión)
      - setup_remote_docker:
          docker_layer_caching: true  # Habilitar la cache de capas de Docker

      # Crear el entorno virtual e instalar dependencias
      - run:
          name: Crear entorno virtual e instalar dependencias
          command: |
            python -m venv venv  # Crear el entorno virtual
            . venv/bin/activate  # Activar el entorno virtual
            pip install -r requirements.txt  # Instalar dependencias del proyecto
            pip install pytest redis  # Instalar pytest y Redis
            pip install pytest-cov  # Instalar pytest-cov
            pip install --upgrade pytest pytest-cov  # Actualizar pytest y pytest-cov
            pip install black  # Instalar black para formateo de código
            pip install ggshield  # Instalar ggshield

      # Verificar entorno virtual
      - run:
          name: Verificar entorno virtual
          command: |
            . venv/bin/activate
            which python  # Verificar la ruta del ejecutable de Python
            which pip     # Verificar la ruta de pip

      # Linting con Black
      - run:
          name: Linting del código
          command: |
            . venv/bin/activate  # Activar entorno virtual
            black --check .  # Revisar si el código está bien formateado

      # Análisis estático de código con GitGuardian
      - run:
          name: Análisis estático con GitGuardian
          command: |
            . venv/bin/activate  # Activar entorno virtual
            ggshield secret scan path . --recursive --json  # Escanear los secretos

      # Esperar a que Redis esté listo para la conexión
      - run:
          name: Esperar inicio de Redis
          command: |
            for i in seq 10; do
              nc -z localhost 6379 && echo "Redis está listo" && break
              echo "Esperando Redis..." 
              sleep 1
            done

      # Ejecutar pruebas con pytest y generar reportes de cobertura
      - run:
          name: Ejecutar pruebas
          environment:
            REDIS_HOST: redis-final  # Variable de entorno para Redis
            REDIS_PORT: 6379         # Puerto de Redis
          command: |
            . venv/bin/activate  # Activar entorno virtual
            pytest tests/ \
              --junitxml=test-results/junit.xml \  # Reporte de pruebas en formato JUnit
              --cov=. \  # Medir la cobertura de las pruebas
              --cov-report=html:test-results/coverage-html  # Reporte de cobertura en HTML

      # Almacenar resultados de las pruebas
      - store_test_results:
          path: test-results

      # Almacenar los artefactos adicionales (por ejemplo, reportes de cobertura)
      - store_artifacts:
          path: test-results
          destination: test-reports

      # Análisis de vulnerabilidades con Snyk
      - run:
          name: Análisis de vulnerabilidades con Snyk
          command: |
            snyk test --all-projects

  # Job para desplegar la imagen Docker a Docker Hub
  deploy:
    docker:
      - image: cimg/base:2024.02  # Imagen base para el job de despliegue
    steps:
      # Clonación del código desde GitHub
      - checkout

      # Configuración de Docker remoto (sin especificar versión)
      - setup_remote_docker:
          docker_layer_caching: true  # Habilitar la cache de capas de Docker

      # Construcción de la imagen Docker
      - run:
          name: Construir imagen Docker
          command: |
            docker build -t $DOCKERHUB_USER/$IMAGE_NAME:$CIRCLE_SHA1 .  # Usa el hash del commit como tag

      # Login en Docker Hub
      - run:
          name: Login a Docker Hub
          command: |
            echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USER --password-stdin  # Login con credenciales

      # Push de la imagen a Docker Hub
      - run:
          name: Push imagen a Docker Hub
          command: |
            docker push $DOCKERHUB_USER/$IMAGE_NAME:$CIRCLE_SHA1  # Subir la imagen a Docker Hub usando el hash del commit como tag

# Workflow para orquestar los jobs
workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build-and-test  # Job de construcción y pruebas
      - deploy:  # Job de despliegue
          requires:
            - build-and-test  # El despliegue depende de que las pruebas pasen
          filters:
            branches:
              only: main  # Solo ejecutamos deploy en la rama main
